# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId = 'idPais', label = 'País:',
choises = pais)
),
# Show a plot of the generated distribution
mainPanel(
tableOutput("TabelaDados")
)
)
)
sidebarPanel(
selectInput(inputId = 'idPais', label = 'País:',
choises = pais)
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
mortes <- sort(colnames(df))[c(-1,-2,-3)]
df <- read.csv("annual_deaths_by_causes.csv")
mortes <- sort(colnames(df))[c(-1,-2,-3)]
view(mortes)
View(mortes)
mortes
mortes <- sort(colnames(df[c(-1,-2,-3)]))
mortes
runApp('Projeto_estatistica_app.R')
View(df)
runApp('Projeto_estatistica_app.R')
# Bibliotecas:
library(shiny)
library(dplyr)
df <- read.csv("annual_deaths_by_causes.csv")
df <- df[!is.na(dados_filtrados)]
library(shiny); runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
MontaTabela(df, anos[1], anos[30], input$idPais, input$idMortes)
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
# Dados:
df <- read.csv("annual_deaths_by_causes.csv")
View(df)
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
# Dados:
df <- read.csv("annual_deaths_by_causes.csv")
mortes_alfabetica <- sort(mortes)
mortes <- colnames(df[c(-1,-2,-3)])
mortes_alfabetica <- sort(mortes)
mortes_alfabetica
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
# Bibliotecas:
library(shiny)
library(dplyr)
# Dados:
df <- read.csv("annual_deaths_by_causes.csv")
anos <- sort(c(unique(df$year)))
pais <- sort(unique(df$country))
mortes <- colnames(df[c(-1,-2,-3)])
mortes_alfabetica <- sort(mortes)
mortes_alfabetica
# Funções:
FiltraDados <- function(dados, ano_inicio, ano_fim, pais, morte_causa){
dados_filtrados <- dados[(dados$year >= ano_inicio & dados$year <= ano_fim &
dados$country == pais), 3 + which(mortes == morte_causa)]
return(dados_filtrados)
}
MontaTabela <- function(dados, ano_inicio, ano_fim, pais, morte_causa){
dados_filtrados <- FiltraDados(dados, ano_inicio, ano_fim, pais, morte_causa)
moda_dados <-
tabela <- data.frame(Classe = morte_causa,
Media = mean(dados_filtrados),
Moda = getmode(c('Sem Moda', dados_filtrados)),
Mediana = median(dados_filtrados),
Desvio_Padrao = sd(dados_filtrados),
Maximo = max(dados_filtrados),
Minimo = min(dados_filtrados))
return(tabela)
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
FormataModa <- function(dados) {
if (length(dados) > 1) {
return(c('Sem Moda', dados))
}
else {
return(dados)
}
}
ggplot(df, x=df$year, y=df$drowning)
library(ggplot2)
ggplot(df, x=df$year, y=df$drowning)
# Bibliotecas:
library(shiny)
library(dplyr)
library(ggplot2)
# Dados:
df <- read.csv("annual_deaths_by_causes.csv")
anos <- sort(c(unique(df$year)))
pais <- sort(unique(df$country))
mortes <- colnames(df[c(-1,-2,-3)])
mortes_alfabetica <- sort(mortes)
mortes_alfabetica
# Funções:
FiltraDados <- function(dados, ano_inicio, ano_fim, pais, morte_causa){
dados_filtrados <- dados[(dados$year >= ano_inicio & dados$year <= ano_fim &
dados$country == pais), 3 + which(mortes == morte_causa)]
return(dados_filtrados)
}
MontaTabela <- function(dados, ano_inicio, ano_fim, pais, morte_causa){
dados_filtrados <- FiltraDados(dados, ano_inicio, ano_fim, pais, morte_causa)
moda_dados <-
tabela <- data.frame(Classe = morte_causa,
Media = mean(dados_filtrados),
Moda = getmode(c('Sem Moda', dados_filtrados)),
Mediana = median(dados_filtrados),
Desvio_Padrao = sd(dados_filtrados),
Maximo = max(dados_filtrados),
Minimo = min(dados_filtrados))
return(tabela)
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
FormataModa <- function(dados) {
if (length(dados) > 1) {
return(c('Sem Moda', dados))
}
else {
return(dados)
}
}
ggplot(df, x=df$year, y=df$drowning)
ggplot(df, x=df$year, y=df$drowning) + geon_line()
ggplot(df, x=df$year, y=df$drowning) + geom_line()
ggplot(df, aes(x=df$year, y=df$drowning)) + geom_line()
# Bibliotecas:
library(shiny)
library(dplyr)
library(ggplot2)
# Dados:
df <- read.csv("annual_deaths_by_causes.csv")
anos <- sort(c(unique(df$year)))
pais <- sort(unique(df$country))
mortes <- colnames(df[c(-1,-2,-3)])
mortes_alfabetica <- sort(mortes)
mortes_alfabetica
# Funções:
FiltraDados <- function(dados, ano_inicio, ano_fim, pais, morte_causa){
dados_filtrados <- dados[(dados$year >= ano_inicio & dados$year <= ano_fim &
dados$country == pais), 3 + which(mortes == morte_causa)]
return(dados_filtrados)
}
MontaTabela <- function(dados, ano_inicio, ano_fim, pais, morte_causa){
dados_filtrados <- FiltraDados(dados, ano_inicio, ano_fim, pais, morte_causa)
moda_dados <-
tabela <- data.frame(Classe = morte_causa,
Media = mean(dados_filtrados),
Moda = getmode(c('Sem Moda', dados_filtrados)),
Mediana = median(dados_filtrados),
Desvio_Padrao = sd(dados_filtrados),
Maximo = max(dados_filtrados),
Minimo = min(dados_filtrados))
return(tabela)
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
FormataModa <- function(dados) {
if (length(dados) > 1) {
return(c('Sem Moda', dados))
}
else {
return(dados)
}
}
ggplot(df, aes(x=df$year, y=df$drowning)) + geom_line()
ggplot(df, aes(x=year, y=drowning)) + geom_line()
ggplot(df, aes(x=year, y=drowning)) + geom_line(group = drownning)
ggplot(df, aes(x=year, y=drowning)) + geom_line(group = drowning)
ggplot(df, aes(x=year, y=drowning)) + geom_line(group = df$drowning)
# Bibliotecas:
library(shiny)
library(dplyr)
library(ggplot2)
# Dados:
df <- read.csv("annual_deaths_by_causes.csv")
anos <- sort(c(unique(df$year)))
pais <- sort(unique(df$country))
mortes <- colnames(df[c(-1,-2,-3)])
mortes_alfabetica <- sort(mortes)
mortes_alfabetica
# Funções:
FiltraDados <- function(dados, ano_inicio, ano_fim, pais, morte_causa){
dados_filtrados <- dados[(dados$year >= ano_inicio & dados$year <= ano_fim &
dados$country == pais), 3 + which(mortes == morte_causa)]
return(dados_filtrados)
}
MontaTabela <- function(dados, ano_inicio, ano_fim, pais, morte_causa){
dados_filtrados <- FiltraDados(dados, ano_inicio, ano_fim, pais, morte_causa)
moda_dados <-
tabela <- data.frame(Classe = morte_causa,
Media = mean(dados_filtrados),
Moda = getmode(c('Sem Moda', dados_filtrados)),
Mediana = median(dados_filtrados),
Desvio_Padrao = sd(dados_filtrados),
Maximo = max(dados_filtrados),
Minimo = min(dados_filtrados))
return(tabela)
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
FormataModa <- function(dados) {
if (length(dados) > 1) {
return(c('Sem Moda', dados))
}
else {
return(dados)
}
}
ggplot(df, aes(x=year, y=drowning)) + geom_line(group = df$drowning)
ggplot(df, aes(x=year, y=drowning)) + geom_line(group = df$year)
ggplot(df, aes(x=year, y=drowning)) + geom_line(group = df$country)
ggplot(df, aes(x=year, y=drowning)) + geom_line(group = df$drowning)
pais <- df[df$country == 'Brazil',]
ggplot(pais, aes(x=year, y=drowning)) + geom_line(group = df$country)
ggplot(pais, aes(x=year, y=drowning)) + geom_line()
runApp('Projeto_estatistica_app.R')
View(df)
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
ggplot(df_filtrado, aes(x=year, y=ColunaMorte(input$idMortes))) + geom_line()
runApp('Projeto_estatistica_app.R')
df_filtrado <- df[df$country == input$idPais, c(1, ColunaMorte(input$idMortes))]
df_filtrado <- df[df$country == 'Brazil', c(1, 4)]
ggplot(df_filtrado, aes(x=year, y=2)) + geom_line()
df_filtrado <- df[df$country == 'Brazil', c(1, 3, 4)]
ggplot(df_filtrado, aes(x=year, y=2)) + geom_line()
df_filtrado
ggplot(df_filtrado, aes(x=year, y=df_filtrado$meningitis)) + geom_line()
ggplot(df_filtrado, aes(x=year, y=df_filtrado[3])) + geom_line()
df_filtrado[3]
df_filtrado$meningitis
type(df_filtrado$meningitis)
Type(df_filtrado$meningitis)
# UI:
ui <- fluidPage(
# Application title
titlePanel("Numero de mortes"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput('idPais', 'País:', choices = pais, selected = 'Brazil'),
selectInput('idMortes', 'Causa de mortes:', choices = mortes_alfabetica, selected = 'road_injuries'),
actionButton('idBotaoFiltro', 'Filtrar')
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("GraficoLinha"),
tableOutput("TabelaDados")
)
)
)
# Bibliotecas:
library(shiny)
library(dplyr)
library(ggplot2)
# Dados:
df <- read.csv("annual_deaths_by_causes.csv")
anos <- sort(c(unique(df$year)))
pais <- sort(unique(df$country))
mortes <- colnames(df[c(-1,-2,-3)])
mortes_alfabetica <- sort(mortes)
mortes_alfabetica
# Funções:
FiltraDados <- function(dados, ano_inicio, ano_fim, pais, morte_causa){
dados_filtrados <- dados[(dados$year >= ano_inicio & dados$year <= ano_fim &
dados$country == pais), ColunaMorte(morte_causa)]
return(dados_filtrados)
}
MontaTabela <- function(dados, ano_inicio, ano_fim, pais, morte_causa){
dados_filtrados <- FiltraDados(dados, ano_inicio, ano_fim, pais, morte_causa)
moda_dados <-
tabela <- data.frame(Classe = morte_causa,
Media = mean(dados_filtrados),
Moda = getmode(c('Sem Moda', dados_filtrados)),
Mediana = median(dados_filtrados),
Desvio_Padrao = sd(dados_filtrados),
Maximo = max(dados_filtrados),
Minimo = min(dados_filtrados))
return(tabela)
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
FormataModa <- function(dados) {
if (length(dados) > 1) {
return(c('Sem Moda', dados))
}
else {
return(dados)
}
}
ColunaMorte <- function(morte_causa) {
return(3 + which(mortes == morte_causa))
}
df_filtrado <- df[df$country == 'Brazil', c(1, 3, 4)]
ggplot(df_filtrado, aes(x=year, y=df_filtrado[3])) + geom_line()
typeof(df_filtrado$meningitis)
df_filtrado[3]
typeof(df_filtrado[3])
typeof(c(df_filtrado[3]))
typeof(c(df_filtrado[3]))
typeof(df_filtrado$meningitis)
ggplot(df_filtrado, aes(x=year, y=df_filtrado[3])) + geom_line()
typeof(typ(df_filtrado[,3]))
typeof(typ(df_filtrado[,3]))
typeof(df_filtrado(df_filtrado[,3]))
typeof(df_filtrado[,3])
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
# Dados:
df <- read.csv("annual_deaths_by_causes.csv")
anos <- sort(c(unique(df$year)))
pais <- sort(unique(df$country))
mortes <- colnames(df[c(-1,-2,-3)])
mortes_alfabetica <- sort(mortes)
mortes_alfabetica
anos
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
runApp('~/Meus/_Estudos_/Faculdade/UFPE/2022.2/ESTATÍSTICA E PROBABILIDADE PARA COMPUTAÇÃO/Atividades/Projetos/Projeto - Atividade em R/ShinyApp.R')
library(shinydashboard)
library(shinydashboard)
dashboardPage()
# Bibliotecas:
library(shiny)
library(shinydashboard)
library(dplyr)
library(ggplot2)
dashboardPage()
dashboardPage(header = cabecalho, sidebar = barra_lateral, body = corpo)
# Bibliotecas:
library(shiny)
library(shinydashboard)
library(dplyr)
library(ggplot2)
# Dashboard:
cabecalho <- dashboardHeader(title = 'Analise mortes por causa')
barra_lateral <- dashboardSidebar()
corpo <- dashboardBody()
# Dados:
df <- read.csv("annual_deaths_by_causes.csv")
anos <- sort(c(unique(df$year)))
pais <- sort(unique(df$country))
mortes <- colnames(df[c(-1,-2,-3)])
mortes_alfabetica <- sort(mortes)
mortes_alfabetica
# Funções:
FiltraDados <- function(dados, morte_causa){
dados_filtrados <- dados[, ColunaMorte(morte_causa)]
return(dados_filtrados)
}
MontaTabela <- function(dados, morte_causa){
dados_filtrados <- FiltraDados(dados, morte_causa)
tabela <- data.frame(Classe = morte_causa,
Media = mean(dados_filtrados),
Moda = getmode(c('Sem Moda', dados_filtrados)),
Mediana = median(dados_filtrados),
Desvio_Padrao = sd(dados_filtrados),
Maximo = max(dados_filtrados),
Minimo = min(dados_filtrados))
return(tabela)
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
FormataModa <- function(dados) {
if (length(dados) > 1) {
return(c('Sem Moda', dados))
}
else {
return(dados)
}
}
ColunaMorte <- function(morte_causa) {
return(3 + which(mortes == morte_causa))
}
dashboardPage(header = cabecalho, sidebar = barra_lateral, body = corpo)
dashboardPage(header = cabecalho, sidebar = barra_lateral, body = corpo)
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
runApp('Projeto_estatistica_app.R')
library(shiny); runApp('Projeto_estatistica_app.R')
